use chrono::{DateTime, Utc};
use serde::Deserialize;

/// Weed message to be generated by the AI system and
/// ingested by control system.
#[derive(Deserialize, Debug, PartialEq)]
pub struct WeedMessage {
    /// Channels to open to spray the weed.
    pub channels_to_open: Vec<u8>,
    /// UTC time set to start spraying.
    pub start_spray_time: DateTime<Utc>,
    /// UTC time end to start spraying.
    pub end_spray_time: DateTime<Utc>,
    /// UTC time that the message was created.
    pub message_created_at: DateTime<Utc>,
    /// UTC time stamp of when the image was captured.
    pub capture_time: DateTime<Utc>,
    /// Offset to account for time for the spray to hit the weed from height.
    pub time_diff_capture_to_start_spray_no_offset: f64,
    /// Distance from the weed to the solenoid at the read of the machine.
    pub distance_to_solenoid_mm: f64,
    /// Which camera has generated this message.
    cam_id: u8,
    /// Which crop bed this message is directed to.
    crop_bed_id: u8,
}

#[cfg(test)]
mod tests {

    use super::*;
    use rstest::rstest;

    #[rstest]
    #[case(
        r#"
        {"channels_to_open": [10, 11],
        "start_spray_time": "2023-08-25 05:14:14.413761000 UTC",
        "end_spray_time": "2023-08-25 05:14:14.433092000 UTC",
        "distance_to_solenoid_mm": 762.5,
        "capture_time": "2023-08-25 05:14:14.070636000 UTC",
        "cam_id": 5,
        "crop_bed_id": 2,
        "message_created_at": "2023-08-25 05:14:21.928972000 UTC"}
        "#
    )]
    #[case(
        r#"{"channels_to_open": [7, 8, 9], 
               "start_spray_time": "2023-07-30 04:11:27.481525000 UTC", 
               "end_spray_time": "2023-07-30 04:11:27.572274000 UTC", 
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
               "distance_to_solenoid_mm": 541.74, 
               "capture_time": "2023-07-30 04:11:27.237741000 UTC", 
               "cam_id": 5, "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [0],
                "start_spray_time": "2023-07-30 04:05:48.614496000 UTC",
                "end_spray_time": "2023-07-30 04:05:48.711152000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                "distance_to_solenoid_mm": 458.21,
                "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                "cam_id": 4, "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [1],
                   "start_spray_time": "2023-07-30 04:05:48.495824000 UTC",
                   "end_spray_time": "2023-07-30 04:05:48.783107000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                   "distance_to_solenoid_mm": 194.5,
                   "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                   "cam_id": 4, "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [2],
                   "start_spray_time": "2023-07-30 04:05:48.495824000 UTC",
                   "end_spray_time": "2023-07-30 04:05:48.783107000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                   "distance_to_solenoid_mm": 194.5,
                   "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                   "cam_id": 4, "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [3],
                   "start_spray_time": "2023-07-30 04:05:48.495824000 UTC",
                   "end_spray_time": "2023-07-30 04:05:48.783107000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                   "distance_to_solenoid_mm": 194.5,
                   "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                   "cam_id": 4, "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [4],
                   "start_spray_time": "2023-07-30 04:05:48.495824000 UTC",
                   "end_spray_time": "2023-07-30 04:05:48.783107000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                   "distance_to_solenoid_mm": 194.5,
                   "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                   "cam_id": 4, "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [5],
                   "start_spray_time": "2023-07-30 04:05:48.495824000 UTC",
                   "end_spray_time": "2023-07-30 04:05:48.835731000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                   "distance_to_solenoid_mm": 194.5,
                   "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                   "cam_id": 4,
                   "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [6],
                    "start_spray_time": "2023-07-30 04:05:48.495824000 UTC",
                    "end_spray_time": "2023-07-30 04:05:48.835731000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                    "distance_to_solenoid_mm": 194.5,
                    "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                    "cam_id": 4, "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [7],
                    "start_spray_time": "2023-07-30 04:05:48.496361000 UTC",
                    "end_spray_time": "2023-07-30 04:05:48.706319000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                    "distance_to_solenoid_mm": 195.69,
                    "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                    "cam_id": 4, "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [8],
                    "start_spray_time": "2023-07-30 04:05:48.496361000 UTC",
                    "end_spray_time": "2023-07-30 04:05:48.679470000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                    "distance_to_solenoid_mm": 195.69,
                    "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                    "cam_id": 4, "crop_bed_id": 2}"#
    )]
    #[case(
        r#"{"channels_to_open": [9],
                    "start_spray_time": "2023-07-30 04:05:48.736927000 UTC",
                    "end_spray_time": "2023-07-30 04:05:48.913592000 UTC",
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
                    "distance_to_solenoid_mm": 730.28,
                    "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                    "cam_id": 4, "crop_bed_id": 2}"#
    )]
    fn test_parse_weed_message(#[case] raw_string: &str) {
        let _parsed: WeedMessage = serde_json::from_str(raw_string).unwrap();
    }

    #[rstest]
    #[case((
        r#"{"channels_to_open": [7, 8, 9], 
               "start_spray_time": "2023-07-30 04:11:27.481525000 UTC", 
               "end_spray_time": "2023-07-30 04:11:27.572274000 UTC", 
               "message_created_at": "2023-07-30 04:11:27.572274000 UTC", 
               "distance_to_solenoid_mm": 541.74, 
               "capture_time": "2023-07-30 04:11:27.237741000 UTC", 
               "cam_id": 5, "crop_bed_id": 2}"#
    , WeedMessage {
            cam_id: 5,
            crop_bed_id: 2,
            channels_to_open: vec![7, 8, 9],
            start_spray_time: "2023-07-30 04:11:27.481525000 UTC".parse().unwrap(),
            capture_time: "2023-07-30 04:11:27.237741000 UTC".parse().unwrap(),
            end_spray_time: "2023-07-30 04:11:27.572274000 UTC".parse().unwrap(),
            message_created_at: "2023-07-30 04:11:27.572274000 UTC".parse().unwrap(),
            time_diff_capture_to_start_spray_no_offset: "2023-07-30 04:05:48.711152000 UTC".parse().unwrap(),
            distance_to_solenoid_mm: 541.74

        }))]
    #[case((
        r#"{"channels_to_open": [0],
                "start_spray_time": "2023-07-30 04:05:48.614496000 UTC",
                "end_spray_time": "2023-07-30 04:05:48.711152000 UTC",
                "message_created_at": "2023-07-30 04:05:48.711152000 UTC",
                "distance_to_solenoid_mm": 458.21,
                "capture_time": "2023-07-30 04:05:48.408300000 UTC",
                "cam_id": 4, "crop_bed_id": 2}"#
    , WeedMessage{
            cam_id: 4,
            crop_bed_id: 2,
            channels_to_open: vec![0],
            start_spray_time: "2023-07-30 04:05:48.614496000 UTC".parse().unwrap(),
            capture_time: "2023-07-30 04:05:48.408300000 UTC".parse().unwrap(),
            end_spray_time: "2023-07-30 04:05:48.711152000 UTC".parse().unwrap(),
            message_created_at: "2023-07-30 04:05:48.711152000 UTC".parse().unwrap(),
            time_diff_capture_to_start_spray_no_offset: "2023-07-30 04:05:48.711152000 UTC".parse().unwrap(),
            distance_to_solenoid_mm: 458.21
        } ))]
    fn test_parse_and_compare_weed_message(#[case] args: (&str, WeedMessage)) {
        let parsed: WeedMessage = serde_json::from_str(args.0).unwrap();

        assert_eq!(parsed, args.1, "Failed to parse message correctly");
    }
}
